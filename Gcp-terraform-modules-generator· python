#!/usr/bin/env python3

---

### ✅ Python Integration (Automation)

You can control this Terraform module with a Python script using `python-terraform` or `subprocess`.  
Example:

```python
import os
from python_terraform import Terraform

# Path to the network module
tf = Terraform(working_dir="./gcp-terraform-modules/network")

# Initialize
print("Initializing Terraform...")
tf.init()

# Apply with variables
print("Applying Terraform...")
return_code, stdout, stderr = tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "network_name": "auto-vpc",
        "subnet_name": "auto-subnet",
        "subnet_cidr": "10.2.0.0/24"
    }
)

print("Return code:", return_code)
print(stdout)


---

### ✅ Python Integration (Automation)

You can control this `subnetwork` module from Python just like the `network` one:

```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/subnetwork")

# Init
tf.init()

# Apply with variables
subnets = [
    {"name": "app-subnet", "cidr": "10.30.1.0/24", "region": "us-central1"},
    {"name": "db-subnet", "cidr": "10.30.2.0/24", "region": "us-east1"},
]

tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "network_id": "projects/my-gcp-project/global/networks/auto-vpc",
        "subnets": str(subnets)  # pass list of dicts
    }
)

---

### ✅ Python Automation

You can manage these buckets programmatically with Python + Terraform:

```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/storage_bucket")

# Init
tf.init()

# Apply with dynamic bucket list
buckets = [
    {
        "name": "python-managed-bucket",
        "location": "US",
        "force_destroy": True,
        "uniform_bucket_level_access": True,
        "versioning": True,
        "lifecycle_rules": [
            {"action": "Delete", "age": 90}
        ]
    }
]

tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "US",
        "buckets": str(buckets)  # pass list of dicts as string
    }
)

---

### ✅ Python Automation

Here’s how to manage the firewall module from Python:

```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/firewall")

# Init
tf.init()

# Apply with firewall rules
firewall_rules = [
    {
        "name": "allow-ssh",
        "direction": "INGRESS",
        "protocol": "tcp",
        "ports": ["22"],
        "source_ranges": ["0.0.0.0/0"],
        "priority": 1000
    },
    {
        "name": "allow-internal",
        "direction": "INGRESS",
        "protocol": "all",
        "source_ranges": ["10.0.0.0/16"],
        "priority": 1001
    }
]

tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "network_id": "projects/my-gcp-project/global/networks/auto-vpc",
        "firewall_rules": str(firewall_rules)  # pass list of dicts
    }
)


---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/cloudsql")

# Init
tf.init()

# Apply Cloud SQL
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "instance_name": "my-postgres-db",
        "database_version": "POSTGRES_14",
        "tier": "db-f1-micro",
        "db_name": "appdb",
        "db_user": "appuser",
        "db_password": "supersecretpassword",
        "enable_public_ip": True,
        "authorized_networks": '[{"name":"office","value":"203.0.113.5/32"}]'
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/compute_instance")

# Init
tf.init()

# Apply Compute Instances
instances = [
    {
        "name": "frontend-vm",
        "machine_type": "e2-micro",
        "zone": "us-central1-a",
        "image": "debian-cloud/debian-11",
        "disk_size_gb": 10,
        "disk_type": "pd-balanced",
        "enable_public_ip": True,
        "tags": ["frontend"],
        "metadata": {"ssh-keys": "user:ssh-rsa AAAAB3..."}
    },
    {
        "name": "backend-vm",
        "machine_type": "e2-small",
        "zone": "us-central1-b",
        "image": "debian-cloud/debian-11",
        "disk_size_gb": 20,
        "disk_type": "pd-ssd",
        "enable_public_ip": False,
        "tags": ["backend"],
        "metadata": {}
    }
]

tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "zone": "us-central1-a",
        "instances": str(instances)
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/gke_cluster")

# Init
tf.init()

# Apply GKE Cluster
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "cluster_name": "my-gke-cluster",
        "network": "projects/my-gcp-project/global/networks/custom-vpc",
        "subnetwork": "gke-subnet",
        "node_count": 3,
        "machine_type": "e2-medium",
        "disk_size_gb": 30,
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/pubsub")

# Init
tf.init()

# Apply Pub/Sub
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "topics": str([
            {"name": "orders", "message_retention_duration": "604800s", "labels": {"env": "dev"}}
        ]),
        "dead_letter_topics": str([
            {"name": "orders-dlq", "labels": {"env": "dev"}}
        ]),
        "subscriptions": str([
            {
                "name": "orders-sub",
                "topic_index": 0,
                "ack_deadline_seconds": 20,
                "retain_acked_messages": True,
                "expiration_ttl": "2678400s",
                "min_backoff": "10s",
                "max_backoff": "600s",
                "dead_letter_topic": 0,
                "max_delivery_attempts": 5,
                "labels": {"env": "dev"}
            }
        ])
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/loadbalancer")

tf.init()
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "name": "myapp-lb",
        "backend_group": "https://www.googleapis.com/compute/v1/projects/my-gcp-project/zones/us-central1-a/instanceGroups/myapp-group",
        "ip_address": "34.123.45.67",
        "domains": str(["example.com"]),
        "use_managed_ssl": True
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/iam")

tf.init()
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "service_accounts": str([
            {"account_id": "ci-cd-sa", "display_name": "CI/CD Service Account", "description": "For pipelines"}
        ]),
        "custom_roles": str([
            {"role_id": "customDeployer", "title": "Custom Deployer", "description": "Deploy role", "permissions": ["compute.instances.start", "compute.instances.stop"]}
        ]),
        "bindings": str([
            {"role": "roles/viewer", "members": ["user:dev@example.com"]},
            {"role": "projects/my-gcp-project/roles/customDeployer", "members": ["serviceAccount:ci-cd-sa@my-gcp-project.iam.gserviceaccount.com"]}
        ])
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/cloudrun")

tf.init()
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "region": "us-central1",
        "name": "myapp",
        "image": "gcr.io/my-gcp-project/myapp:latest",
        "cpu": "2",
        "memory": "1Gi",
        "concurrency": 50,
        "timeout_seconds": 600,
        "env_vars": str({"ENV": "production", "DB": "postgres://user:pass@host:5432/db"}),
        "allow_unauthenticated": True
    }
)

---

## ✅ Python Automation Example
```python
from python_terraform import Terraform

tf = Terraform(working_dir="./gcp-terraform-modules/cdn_and_dns")

tf.init()
tf.apply(
    skip_plan=True,
    var={
        "project": "my-gcp-project",
        "name": "mycdn",
        "bucket_name": "my-static-bucket",
        "domain": "example.com"
    }
)
