name: Infrastructure Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform (deploy/destroy)"
        required: true
        default: "deploy"
      modules:
        description: "Comma-separated list of modules or 'all'"
        required: true
        default: "network"

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'deploy') || contains(github.event.head_commit.message, 'destroy')
    env:
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/credentials.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Authenticate to Google Cloud
        run: |
          echo '${{ secrets.PERSONAL_GCP_CREDENTIALS }}' > gcp-terraform-key.json
        #   gcloud config set project konecta-task-1-hands-on

      - name: Export GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/gcp-terraform-key.json" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Extract action and modules from commit
        id: parse
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"

          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "action=${{ github.event.inputs.action }}" >> $GITHUB_OUTPUT
            echo "modules=${{ github.event.inputs.modules }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ "$COMMIT_MSG" =~ ^(deploy|destroy):([a-zA-Z0-9_, -]+)$ ]]; then
            ACTION="${BASH_REMATCH[1]}"
            MODULES="${BASH_REMATCH[2]}"
            echo "action=$ACTION" >> $GITHUB_OUTPUT
            echo "modules=$MODULES" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Commit message must match 'deploy:<module>' or 'destroy:<module1,module2>' or 'destroy:all'"
            exit 1
          fi

      - name: Run Terraform for each module
        id: tf_run
        run: |
          ACTION="${{ steps.parse.outputs.action }}"
          MODULES="${{ steps.parse.outputs.modules }}"
          echo "" > tf_output.log

          if [ "$MODULES" = "all" ]; then
            echo "üîé Running $ACTION on ALL modules"
            MODULES=$(ls -1 modules | tr '\n' ',')
          fi

          IFS=',' read -ra MODULE_ARRAY <<< "$MODULES"
          for MODULE in "${MODULE_ARRAY[@]}"; do
            MODULE=$(echo "$MODULE" | xargs) # trim spaces
            if [ -d "modules/$MODULE" ]; then
              echo "üöÄ Running $ACTION on module: $MODULE" | tee -a tf_output.log
              python scripts/manage_modules.py "$ACTION" "$MODULE" 2>&1 | tee -a tf_output.log
              echo "----------------------------------------" >> tf_output.log
            else
              echo "‚ö†Ô∏è Skipping unknown module: $MODULE" | tee -a tf_output.log
            fi
          done

      - name: Collect Terraform outputs
        if: success()
        run: |
          for MODULE in $(ls modules); do
            if [ -d "modules/$MODULE" ]; then
              cd modules/$MODULE
              terraform output -json || echo "No outputs for $MODULE"
              cd ../..
            fi
          done | tee -a tf_output.log

      - name: Slack Notification
        if: always()
        run: |
          STATUS=":white_check_mark: Infra ${{ steps.parse.outputs.action }} succeeded for: ${{ steps.parse.outputs.modules }}"
          if [ "${{ job.status }}" != "success" ]; then
            STATUS=":x: Infra ${{ steps.parse.outputs.action }} failed for: ${{ steps.parse.outputs.modules }}"
          fi

          LOGS=$(tail -n 30 tf_output.log)

          PAYLOAD=$(jq -n \
            --arg text "$STATUS\nLogs:\n\`\`\`\n$LOGS\n\`\`\`" \
            '{text: $text}')

          curl -X POST -H 'Content-type: application/json' \
            --data "$PAYLOAD" \
            ${{ secrets.SLACK_WEBHOOK_URL }}
